{"version":3,"sources":["logo.svg","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Square","className","this","props","value","React","Component","InField","state","title","type","name","onChange","Calculator","start","end","range","event","Number","target","setState","toString","e","handleStartChange","handleEndChange","handleRangeChange","App","src","logo","alt","startValue","href","rel","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yFAAAA,EAAOC,QAAU,IAA0B,kC,4MCQrCC,G,uLAEF,OACE,4BAAQC,UAAU,UAEfC,KAAKC,MAAMC,W,GALCC,IAAMC,YAkBrBC,E,YAEJ,WAAYJ,GAAqB,IAAD,8BAC9B,4CAAMA,KACDK,MAAQ,CACXC,MAAON,EAAMC,OAHe,E,sEAS9B,OAAO,2BAAOM,KAAK,OAAOC,KAAK,QAAQP,MAAOF,KAAKC,MAAMC,MACvDQ,SAAUV,KAAKC,MAAMS,e,GAZLP,IAAMC,WA0BtBO,E,YACJ,WAAYV,GAAwB,IAAD,8BACjC,4CAAMA,KACDK,MAAQ,CACXM,MAAO,IACPC,IAAK,IACLC,MAAO,KALwB,E,oEAUjC,OAAO,K,wCAGSC,GAChB,IAAMD,EAAQE,OAAOD,EAAME,OAAOf,OAC5BW,EAAMC,EAAQd,KAAKM,MAAMM,MAC/BZ,KAAKkB,SAAS,CAACL,MAAKC,Y,wCAGJC,GAChB,IAAMH,EAAQI,OAAOD,EAAME,OAAOf,OAC5BY,EAAQd,KAAKM,MAAMO,IAAMD,EAC/BZ,KAAKkB,SAAS,CAACN,QAAOE,Y,sCAGRC,GACd,IAAMF,EAAMG,OAAOD,EAAME,OAAOf,OAC1BY,EAAQD,EAAMb,KAAKM,MAAMM,MAC/BZ,KAAKkB,SAAS,CAACL,MAAKC,Y,+BAGZ,IAAD,OACP,OACE,sCACQ,kBAAC,EAAD,CAASZ,MAAOF,KAAKM,MAAMM,MAAMO,WAAYT,SAAU,SAACU,GAAD,OAA4C,EAAKC,kBAAkBD,MAAK,4BADvI,QAEO,kBAAC,EAAD,CAASlB,MAAOF,KAAKM,MAAMO,IAAIM,WAAYT,SAAU,SAACU,GAAD,OAA4C,EAAKE,gBAAgBF,MAAK,4BAFlI,cAGa,kBAAC,EAAD,CAASlB,MAAOF,KAAKM,MAAMQ,MAAMK,WAAYT,SAAU,SAACU,GAAD,OAA4C,EAAKG,kBAAkBH,MAAK,iC,GArCzHjB,IAAMC,WAiEhBoB,EAvBO,WACpB,OACE,yBAAKzB,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAK0B,IAAKC,IAAM3B,UAAU,WAAW4B,IAAI,SACzC,kBAAC,EAAD,CAAQzB,MAAM,OACd,kBAAC,EAAD,CAAY0B,WAAW,QACvB,uCACW,6CADX,wBAGA,uBACE7B,UAAU,WACV8B,KAAK,sBACLZ,OAAO,SACPa,IAAI,uBAJN,kBC5FYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.a8305964.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\ninterface SquareProps{\n  value: String\n}\n\nclass Square extends React.Component<SquareProps> {\n  render() {\n    return (\n      <button className=\"square\"\n      >\n        {this.props.value}\n      </button>\n    );\n  }\n}\n\ninterface InFieldProps{\n  value: string,\n  onChange: any\n} \ninterface InFieldState{\n  title: string\n} \nclass InField extends React.Component<InFieldProps,InFieldState>{ \n\n  constructor(props: InFieldProps){\n    super(props);\n    this.state = {\n      title: props.value\n    };\n  }\n\n\n  render() {\n    return <input type='text' name='title' value={this.props.value} \n      onChange={this.props.onChange}/>\n  }\n}\n\ninterface CalculatorProps{\n  startValue: string\n} \n\ninterface CalculatorState{\n  start: number,\n  end: number,\n  range: number\n} \n\nclass Calculator extends React.Component<CalculatorProps,CalculatorState>{\n  constructor(props: CalculatorProps){\n    super(props);\n    this.state = {\n      start: 100,\n      end: 300,\n      range: 200\n    } \n  } \n\n  calc(){\n    return 17;\n  } \n\n  handleRangeChange(event: React.ChangeEvent<HTMLInputElement>) {\n    const range = Number(event.target.value);\n    const end = range + this.state.start;\n    this.setState({end, range});\n  }\n\n  handleStartChange(event: React.ChangeEvent<HTMLInputElement>) {\n    const start = Number(event.target.value);\n    const range = this.state.end - start;\n    this.setState({start, range});\n  }\n\n  handleEndChange(event: React.ChangeEvent<HTMLInputElement>) {\n    const end = Number(event.target.value);\n    const range = end - this.state.start;\n    this.setState({end, range});\n  }\n\n  render() {\n    return (\n      <div>\n        Start <InField value={this.state.start.toString()} onChange={(e: React.ChangeEvent<HTMLInputElement>) => this.handleStartChange(e)}/><p/>\n        Ende <InField value={this.state.end.toString()} onChange={(e: React.ChangeEvent<HTMLInputElement>) => this.handleEndChange(e)}/><p/>\n        Entfernung <InField value={this.state.range.toString()} onChange={(e: React.ChangeEvent<HTMLInputElement>) => this.handleRangeChange(e)}/><p/>\n      </div>\n    )};\n} \n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <Square value='99' />\n        <Calculator startValue='111'/>\n        <p>\n          Edit the <code>src/App.tsx</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}